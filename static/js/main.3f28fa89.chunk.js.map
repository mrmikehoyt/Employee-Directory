{"version":3,"sources":["components/Header.js","components/Filter.js","components/Results.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","className","AppBar","position","Toolbar","Typography","variant","formControl","margin","minWidth","selectEmpty","marginTop","Filter","handleFilter","FormControl","NativeSelect","onChange","e","target","value","map","i","key","table","StyledTableCell","withStyles","head","background","border","borderRadius","boxShadow","color","height","padding","body","fontSize","TableCell","StyledTableRow","backgroundColor","palette","action","hover","TableRow","myStyles","display","justifyContent","Results","useState","Employees","list","setList","compare","a","b","comparison","data","name","style","Button","onClick","sortedList","concat","sort","filter","TableContainer","component","Paper","Table","size","aria-label","TableHead","align","TableBody","id","work","email","Footer","Chip","avatar","Avatar","label","clickable","window","open","deleteIcon","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4vCAQMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAmBCK,EAfA,SAAC,GAAe,IAAbD,EAAY,EAAZA,MACXE,EAAUV,IAChB,OACC,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UAChB,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAC1CA,O,uGCvBFR,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCe,YAAa,CACXC,OAAQhB,EAAMK,QAAQ,GACtBY,SAAU,KAEZC,YAAa,CACXC,UAAWnB,EAAMK,QAAQ,QAmBde,EAfA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACXb,EAAUV,IAGhB,OACE,kBAACwB,EAAA,EAAD,CAAab,UAAWD,EAAQO,aAC3B,kBAACQ,EAAA,EAAD,CAAcC,SAAU,SAACC,GAAD,OAAMJ,EAAaI,EAAEC,OAAOC,SACvD,4BAAQA,MAAM,QAAd,QALc,CAAC,YAAa,aAAc,kBAAmB,gBAM/CC,KAAI,SAACjB,EAAUkB,GAAX,OAAiB,4BAAQC,IAAKD,EAAGF,MAAOhB,GAAWA,SCPnEb,EAAYC,YAAW,CAC5BgC,MAAO,CACNd,SAAU,OAINe,EAAkBC,aAAW,SAACjC,GAAD,MAAY,CAC9CkC,KAAM,CACNC,WAAY,mDACZC,OAAQ,EACRC,aAAc,EACdC,UAAW,wCACXC,MAAO,QACPC,OAAQ,GACRC,QAAS,UAETC,KAAM,CACJC,SAAU,OAXWV,CAarBW,KAEEC,EAAiBZ,aAAW,SAACjC,GAAD,MAAY,CAC5CC,KAAM,CACJ,qBAAsB,CACpB6C,gBAAiB9C,EAAM+C,QAAQC,OAAOC,WAHrBhB,CAMnBiB,KAEEC,EAAW,CAChBC,QAAS,OACTC,eAAgB,gBA2EFC,EAxEC,WACf,IAAM9C,EAAUV,IADK,EAEGyD,mBAASC,GAFZ,mBAEdC,EAFc,KAERC,EAFQ,KAUrB,SAASC,EAAQC,EAAGC,GACnB,IAAIC,EAAa,EAOjB,OANIF,EAAEG,KAAKC,KAAOH,EAAEE,KAAKC,KACxBF,EAAa,EACHF,EAAEG,KAAKC,KAAOH,EAAEE,KAAKC,OAC/BF,GAAc,GAGRA,EAgBR,OACC,6BACC,yBAAKrD,UAAU,iBAAiBwD,MAAOd,GACrC,kBAACe,EAAA,EAAD,CAAQpD,QAAQ,YAAYyB,MAAM,YAAY4B,QAjCjC,WAChB,IAAMC,EAAa,GAAGC,OAAOZ,GAC7BW,EAAWE,KAAKX,GAChBD,EAAQU,KA8BL,gBAGD,kBAAC,EAAD,CAAQ/C,aAjBQ,SAACkD,GAElBb,EADc,SAAXa,EACKf,EAAUe,QAAO,SAAC9C,GACzB,OAAQA,EAAEsC,KAAKpD,WAAa4D,KAGrBf,OAaR,6BAAM,6BACN,kBAACgB,EAAA,EAAD,CAAgBC,UAAWC,KAC1B,kBAACC,EAAA,EAAD,CAAOlE,UAAWD,EAAQuB,MAAO6C,KAAK,SAASC,aAAW,oBACzD,kBAACC,EAAA,EAAD,KACC,kBAAC5B,EAAA,EAAD,KACC,kBAAClB,EAAD,CAAiB+C,MAAM,UAAvB,eACA,kBAAC/C,EAAD,CAAiB+C,MAAM,UAAvB,QACA,kBAAC/C,EAAD,CAAiB+C,MAAM,UAAvB,YACA,kBAAC/C,EAAD,CAAiB+C,MAAM,UAAvB,UACA,kBAAC/C,EAAD,CAAiB+C,MAAM,UAAvB,WAGF,kBAACC,EAAA,EAAD,KACEvB,EAAK7B,KAAI,SAACH,GAAD,OACT,kBAACoB,EAAD,CAAiBf,IAAKL,EAAEwD,IACvB,kBAACjD,EAAD,CAAiB+C,MAAM,UAAUtD,EAAEwD,IACnC,kBAACjD,EAAD,CAAiB+C,MAAM,UAAUtD,EAAEsC,KAAKC,MACxC,kBAAChC,EAAD,CAAiB+C,MAAM,UAAUtD,EAAEsC,KAAKpD,UACxC,kBAACqB,EAAD,CAAiB+C,MAAM,UAAUtD,EAAEsC,KAAKmB,MACxC,kBAAClD,EAAD,CAAiB+C,MAAM,UAAUtD,EAAEsC,KAAKoB,gB,iCClFjCC,EArBA,WAMd,OACC,6BACC,kBAACC,EAAA,EAAD,CAEKC,OAAQ,kBAACC,EAAA,EAAD,UACRC,MAAM,eACNC,WAAS,EACblD,MAAM,UACN4B,QAZiB,WACnBuB,OAAOC,KAAK,sDAYNC,WAAY,kBAAC,IAAD,UCNLC,MAVf,WACE,OACE,yBAAKpF,UAAU,OACb,kBAAC,EAAD,CAAQH,MAAM,mCADhB,IACmD,6BAAK,6BACtD,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcwF,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3f28fa89.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst Header = ({ title }) => {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<Typography variant=\"h6\" className={classes.title}>\r\n\t\t\t\t\t\t\t{title}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t</div>\t\t\r\n\t);\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst Filter = ({ handleFilter }) => {\r\n\tconst classes = useStyles();\r\n\tconst positions = ['Tech Lead', 'Cloud Team', 'Project Manager', 'Tech Support'];\r\n\r\n\treturn (\r\n\t\t\t<FormControl className={classes.formControl}>\r\n        <NativeSelect onChange={(e)=> handleFilter(e.target.value)}>\r\n\t\t\t\t\t<option value='None'>None</option>\r\n        {positions.map((position, i) => <option key={i} value={position}>{position}</option>)}\r\n      </NativeSelect>\r\n      </FormControl>\r\n\r\n\t);\r\n};\r\n\r\nexport default Filter;\r\n\r\n","import React, { useState } from 'react'\r\nimport Employees from '../data/Employee.json'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n\tTable,\r\n\tTableBody,\r\n\tTableCell,\r\n\tTableContainer,\r\n\tTableHead,\r\n\tTableRow,\r\n\tPaper,\r\n\tButton\r\n} from '@material-ui/core';\r\nimport Filter from './Filter';\r\n\r\n\tconst useStyles = makeStyles({\r\n\t\ttable: {\r\n\t\t\tminWidth: 650,\r\n\t\t},\r\n\t});\r\n\r\n\tconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n\t\tbackground: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n\t\tborder: 0,\r\n\t\tborderRadius: 3,\r\n\t\tboxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n\t\tcolor: 'white',\r\n\t\theight: 48,\r\n\t\tpadding: '0 30px',\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst myStyles = {\r\n\tdisplay: 'flex',\r\n\tjustifyContent: 'space-evenly',\r\n};\r\n\r\nconst Results = () => {\r\n\tconst classes = useStyles();\r\n\tconst [list, setList] = useState(Employees);\r\n\r\n\tconst sortList = () => {\r\n\t\tconst sortedList = [].concat(list);\r\n\t\tsortedList.sort(compare);\r\n\t\tsetList(sortedList);\r\n\t}\r\n\r\n\tfunction compare(a, b) {\r\n\t\tlet comparison = 0;\r\n\t\tif (a.data.name > b.data.name) {\r\n\t\t\tcomparison = 1;\r\n\t\t} else if (a.data.name < b.data.name) {\r\n\t\t\tcomparison = -1;\r\n\t\t}\r\n\r\n\t\treturn comparison;\r\n\t}\r\n\r\n\t//function that filters the list above according to what filter\r\n\t// the user selected\r\n\tconst filterList = (filter) => {\r\n\t\tif (filter !== 'None') {\r\n\t\t\tsetList(Employees.filter((e) => {\r\n\t\t\t\treturn (e.data.position === filter);\r\n\t\t\t}))\r\n\t\t} else {\r\n\t\t\tsetList(Employees);\r\n\t\t}\r\n\t\t\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className='flex-container' style={myStyles}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={sortList}>\r\n\t\t\t\tSort by Name\r\n      </Button>\r\n\t\t\t\t<Filter handleFilter={filterList}/>\r\n\t\t\t</div>\r\n\t\t\t<br /><br />\r\n\t\t\t<TableContainer component={Paper}>\r\n\t\t\t\t<Table className={classes.table} size=\"medium\" aria-label=\"customized table\">\r\n\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t<StyledTableCell align=\"center\">Employee ID</StyledTableCell>\r\n\t\t\t\t\t\t\t<StyledTableCell align=\"center\">Name</StyledTableCell>\r\n\t\t\t\t\t\t\t<StyledTableCell align=\"center\">Position</StyledTableCell>\r\n\t\t\t\t\t\t\t<StyledTableCell align=\"center\">work #</StyledTableCell>\r\n\t\t\t\t\t\t\t<StyledTableCell align=\"center\">Email</StyledTableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t{list.map((e) => (\r\n\t\t\t\t\t\t\t<StyledTableRow  key={e.id}>\r\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"center\">{e.id}</StyledTableCell>\r\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"center\">{e.data.name}</StyledTableCell>\r\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"center\">{e.data.position}</StyledTableCell>\r\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"center\">{e.data.work}</StyledTableCell>\r\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"center\">{e.data.email}</StyledTableCell>\r\n\t\t\t\t\t\t\t</StyledTableRow>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</TableBody>\r\n\r\n\t\t\t\t</Table>\r\n\t\t\t</TableContainer>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Results;","import React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\n\r\n\r\nconst Footer = () => {\r\n\r\n\tconst handleClick = () => {\r\n\t\twindow.open('https://github.com/mrmikehoyt/Employee-Directory/');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Chip\r\n\t\t\t\r\n        avatar={<Avatar>M</Avatar>}\r\n        label=\"Michael Hoyt\"\r\n        clickable\r\n\t\t\t\tcolor=\"primary\"\r\n\t\t\t\tonClick={handleClick}\r\n        deleteIcon={<DoneIcon />}\r\n      />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Results from './components/Results';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header title='******Employee Directory******'/> <br/><br/>\n      <Results />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}